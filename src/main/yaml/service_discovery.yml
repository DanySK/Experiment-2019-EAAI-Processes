incarnation: scafi

variables:
  seed: &seed
    min: 0
    max: 9
    step: 1
    default: 0
  cloudcost: &cloudcost
    type: ArbitraryVariable
    parameters: [15, [0, 1, 5, 10, 15, 20, 30, 50]]
  taskFrequency: &taskFrequency
    type: ArbitraryVariable
    parameters: [0.01, [0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1]]
  taskPropagationTime: &taskPropagationTime
    formula: 10
  taskConclusionTime: &taskConclusionTime
    formula: 100
  serverCount: &serverCount
    formula: 10
  desktopCount: &desktopCount
    formula: 25
  socCount: &socCount
    formula: 100
  algorithm: &algorithm
    type: Flag
    parameters: [false]

export:
  - time
  - molecule: taskHops
    aggregators: [mean]
    value-filter: FilterNaN
  - molecule: tasks
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: completedTasks
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: giveupTasks
    aggregators: [sum]
    value-filter: FilterNaN
  - molecule: taskLatency
    aggregators: [sum]
    value-filter: FilterNaN

seeds:
  scenario: *seed
  simulation: *seed

network-model:
  type: ConnectWithinDistance
  parameters: [1.5]

pools:
  - pool: &program
      - time-distribution:
          type: ExponentialTime
          parameters: [1]
        type: Event
        actions:
          - type: RunScafiProgram
            parameters: [it.unibo.casestudy.ServiceDiscovery, 5.0] # second argument is retention time
      - program: send
  - pool: &taskGenerator
      - time-distribution:
          type: ExponentialTime
          parameters: [*taskFrequency] # lambda (mean freq)
        type: Event
        actions:
          - type: RunScafiProgram
            parameters: [it.unibo.casestudy.TaskGenerator, 5.0] # second argument is retention time
displacements:
  - in:
      type: CircularArc
      parameters: [*serverCount, 0, 0, 0.5]
    contents:
      - molecule: "algorithm"
        concentration: *algorithm
      - molecule: cloudcost
        concentration: *cloudcost
      - molecule: tasks
        concentration: 0
      - molecule: taskHops
        concentration: Double.NaN
      - molecule: completedTasks
        concentration: 0
      - molecule: giveupTasks
        concentration: 0
      - molecule: taskLatency
        concentration: 0
      - molecule: taskPropagationTime
        concentration: *taskPropagationTime
      - molecule: taskConclusionTime
        concentration: *taskConclusionTime
    programs:
      - *program
  - in:
      type: CircularArc
      parameters: [*desktopCount, 0, 0, 1.8]
    contents:
      - molecule: "algorithm"
        concentration: *algorithm
      - molecule: cloudcost
        concentration: *cloudcost
      - molecule: taskHops
        concentration: Double.NaN
      - molecule: tasks
        concentration: 0
      - molecule: completedTasks
        concentration: 0
      - molecule: giveupTasks
        concentration: 0
      - molecule: taskLatency
        concentration: 0
      - molecule: taskPropagationTime
        concentration: *taskPropagationTime
      - molecule: taskConclusionTime
        concentration: *taskConclusionTime
    programs:
      - *program
      - *taskGenerator
  - in:
      type: CircularArc
      parameters: [*socCount, 0, 0, 3]
    contents:
      - molecule: "algorithm"
        concentration: *algorithm
      - molecule: cloudcost
        concentration: *cloudcost
      - molecule: taskHops
        concentration: Double.NaN
      - molecule: tasks
        concentration: 0
      - molecule: completedTasks
        concentration: 0
      - molecule: giveupTasks
        concentration: 0
      - molecule: taskLatency
        concentration: 0
      - molecule: taskPropagationTime
        concentration: *taskPropagationTime
      - molecule: taskConclusionTime
        concentration: *taskConclusionTime
    programs:
      - *program
      - *taskGenerator
