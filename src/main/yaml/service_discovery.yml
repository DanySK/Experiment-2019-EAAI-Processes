incarnation: scafi

variables:
  meanTaskSize: &meanTaskSize
    formula: 1000
  serverCount: &serverCount
    formula: 10
  desktopCount: &desktopCount
    formula: 25
  socCount: &socCount
    formula: 100
  maxTasks: &maxTasks
    formula: 50
  seed: &seed
    min: 0
    max: 0
    step: 1
    default: 0

seeds:
  scenario: *seed
  simulation: *seed

network-model:
  type: ConnectWithinDistance
  parameters: [1.5]

pools:
  - pool: &program
      - time-distribution:
          type: ExponentialTime
          parameters: [1]
        type: Event
        actions:
          - type: RunScafiProgram
            parameters: [it.unibo.casestudy.ServiceDiscovery, 5.0] # second argument is retention time
      - program: send

#sgcg: &sgcg
 # - time-distribution: 1
 #   program: sgcg:sgcg
 # - program: send

#taskGenerator: &taskGenerator
#  - time-distribution:
#      type: ExponentialTime
#      parameters: [1]
#    program: >
#      import Task.newTask
#      newTask(self.nextRandomDouble() * env.get("meanTaskSize") * self.getDeviceUID().getId(), env.get("maxTasks"))

taskSize: &taskSize
  molecule: meanTaskSize
  concentration: *meanTaskSize
maxTaskPerNode: &maxTaskPerNode
  molecule: maxTasks
  concentration: *maxTasks

displacements:
  - in:
      type: CircularArc
      parameters: [*serverCount, 0, 0, 0.5]
    contents:
      #- molecule: cpuType
      #  concentration: "server"
      - *taskSize
      - *maxTaskPerNode
    programs:
      - *program
  - in:
      type: CircularArc
      parameters: [*desktopCount, 0, 0, 1.8]
    contents:
      #- molecule: cpuType
      #  concentration: "desktop"
      - *taskSize
      - *maxTaskPerNode
    programs:
      - *program
      #- *taskGenerator
  - in:
      type: CircularArc
      parameters: [*socCount, 0, 0, 3]
    contents:
      #- molecule: cpuType
      #  concentration: "soc"
      - molecule: meanTaskSize
        concentration: *meanTaskSize
      - *taskSize
      - *maxTaskPerNode
    programs:
      - *program
      #- *taskGenerator
