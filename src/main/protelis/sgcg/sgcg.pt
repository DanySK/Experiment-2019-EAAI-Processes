module sgcg:sgcg

//import protelis:coord:sparsechoice
import sgcg:customsparsechoice
import protelis:coord:accumulation
import protelis:coord:spreading
import protelis:lang:utils
import protelis:state:time
import protelis:coord:meta:timereplication
import protelis:coord:nonselfstabilizing:accumulation
import sgcg:election
import TaskManager.*
import Assertions.*

public def fastG(source, sourceLevel, initial, metric, accumulate) {
	let default = [POSITIVE_INFINITY, initial]
    share (distanceValue <- default) {
        mux (source) {
            // If the device is a source then G return a 0 potential
            // and the initial value
            [sourceLevel, initial]
        } else {
            // The other device potentials are requested
            // G returns the value related to the minimum potential
           foldMin(default, [
                // potential estimation
                distanceValue.get(0) + metric(),
                // values estimation
                accumulate(distanceValue.get(1))
            ]);
        }
    }.get(1) // return the accumulated value
}

public def nbrRangeDelta() = self.nbrRange() + 0.1

let myid = self.getDeviceUID().getId()
let networkCost = 0.01
let freeCapacity = freeMips()
env.put("freeCapacity", freeCapacity)
let maxCapacity = rep (maxEver <- freeCapacity) { max(maxEver, freeCapacity) }
env.put("maxCapacity", maxCapacity)
let capacity = exponentialBackoffFilter(freeCapacity, 0.1)
env.put("capacity", capacity)
//let sink = singleLeader(myid)
//env.put("singleLeader", sink)
//let isSink = sink == myid
//let minMaxCapacity = cossip(isSink, [capacity, capacity]) { a, b ->
//	[ min(a.get(0), b.get(0)), max(a.get(1), b.get(1)) ]
//}
//env.put("minMaxCapacity", minMaxCapacity)
//let minCapacity = min(capacity, minMaxCapacity.get(0))
//env.put("minCapacity", minCapacity)
//let maxCapacity = max(capacity, minMaxCapacity.get(1))
//env.put("maxCapacity", maxCapacity)
//let normalizedCapacity = if (maxCapacity == minCapacity) { 1 } else { (capacity - minCapacity) / (maxCapacity - minCapacity) }
//let metric = mux (nbr(myid) == myid) { 0 } else { (normalizedCapacity + nbr(normalizedCapacity)) / 2 + networkCost }
//metricIsConsistent(metric)
//env.put("normalizedCapacity", normalizedCapacity)
let metric = mux (nbr(myid) == myid) { 0 } else { min(capacity, nbr(capacity)) + networkCost }
env.putField("metric", metric)
update(self.getDeltaTime() * 100)
let locallyCompleted = completedTasks()
env.put("locallyCompleted", locallyCompleted)
let locallyCompletedTasks = locallyCompleted.map { it.getTask() }
let completed = timeReplicatedWithK({ gossip(locallyCompletedTasks, union) }, locallyCompletedTasks, 10, 2)
env.put("completed", completed)
let previouslyWaiting = waitingTasks()
env.put("previouslyWaiting", previouslyWaiting)
let justCompleted = previouslyWaiting.intersection(completed)
env.put("justCompleted", justCompleted)
env.put("done", optionally(env.get("done")).orElse(0) + justCompleted.size())
let waiting = previouslyWaiting.subtract(justCompleted)
env.put("waiting", waiting)
cleanupCompletedTasks(justCompleted)
//let isCandidate = capacity > 0 || capacity == maxCapacity 
//env.put("isCandidate", isCandidate)
//let isLeader = if (isCandidate) { S(1) { metric } } else { false }
let leader = customSparseChoice(capacity, maxCapacity, myid, 2000) { metric }
env.put("leader", leader)
let isLeader = leader == myid
env.put("isLeader", isLeader)
let potential = distanceToWithMetric(isLeader) { metric }
nonNegative(potential)
env.put("potential", potential)
let executing = runningTasks()
env.put("executing", allocationInfo())
let receivedTasks = C(potential, { a, b -> a.union(b).subtract(executing).subtract(completed) }, waiting, [])
env.put("receivedTasks", receivedTasks)
enqueue(if (isLeader) { receivedTasks } else { [] })
